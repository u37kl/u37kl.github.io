---
layout:     post
title:      "iOS"
subtitle:   "KVO基础知识和原理"
date:       2017-03-10 12:00:00
author:     "Hux"
header-img: "img/post-bg-rwd.jpg"
header-mask: 0.3
tags:
    - iOS-KVO
---
# 1.KVO最重要的三个方法：


```
0.为OC对象设置观察者
1.调用该方法的对象是被监视的一方
2.observer: 监视者
3.keyPath: 要监视对方的属性
4.options: 当属性发生变化时，告诉监视者旧的属性、新的属性
5.context: 上下文，当A观察B时，A的父类C也会观察B，用该属性来区分当属性变化时，通知发给A还是C

- (void)addObserver:(NSObject *)observer 
        forKeyPath:(NSString *)keyPath 
        options:(NSKeyValueObservingOptions)options
        context:(nullable void *)context;

0.为在观察者类中实现的方法，使用该方法通知观察者，被观察者的属性变化了
1.keyPath: 监视的对方属性
2.object: 监视的对方对象实例
3.change: 保存被观察者属性发生的变化
4.context: 上下文，区分父类还是子类观察该属性变化

- (void)observeValueForKeyPath:(nullable NSString *)keyPath
        ofObject:(nullable id)object 
        change:(nullable NSDictionary<NSKeyValueChangeKey, id> *)change     
        context:(nullable void *)context;
    
0.删除被观察者身上的观察者
1.调用该方法的对象是被监视的一方
2.observer: 监视者
3.keyPath: 要监视对方的属性
- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;

```

# 2.KVO使用实例--监听对象属性、监听数组

```
Account.h

static void *AccountBlance = "AccountBlance";
static void *AccountInterent = "AccountInterent";

@interface Account : NSObject
    @property(nonatomic, copy) NSString *blance;
    @property(nonatomic, copy) NSString *interent;
@end

Person.m
@implementation Person

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey,id> *)change context:(void *)context
{
    // 注释1
    if (context == AccountBlance) {
        NSLog(@"blance");
        // 注释2
        self.name = change[NSKeyValueChangeNewKey];
    }else{
        NSLog(@"interent");
        self.name = change[NSKeyValueChangeNewKey];
    }
}

ViewController.m
@interface ViewController ()
    @property (nonatomic, strong)Person *p;
    @property (nonatomic, strong)Account *a;
    @property (nonatomic, strong)NSMutableArray *arrM;
@end

@implementation ViewController
- (void)viewDidLoad(){
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
    
    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(50, 50, 100, 50)];
    [btn setBackgroundColor:[UIColor redColor]];
    [btn addTarget:self action:@selector(test) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:btn];
    
    self.p = [[Person alloc] init];
    self.a = [[Account alloc] init];
    self.arrM = [NSMutableArray array];
    
    // p对象监听a对象的blance属性
    [self.a addObserver:self.p forKeyPath:@"blance" options:NSKeyValueObservingOptionNew context:AccountBlance];
    
    // p对象监听a对象的interent属性
    [self.a addObserver:self.p forKeyPath:@"interent" options:NSKeyValueObservingOptionNew context:AccountInterent];
}
    // p对象监听ViewController对象的arrM属性
    [self addObserver:self.p forKeyPath:@"arrM" options:NSKeyValueObservingOptionNew context:self.p];
}

- (void)test{

    // 监听Account对象
    self.a.blance = @"AAASAAA";
    self.a.interent = @"bbbs"; 
    // 要想让对象监听数组，必须使用下面的方式为数组添加元素。
    [[self mutableArrayValueForKey:@"arrM"] addObject:@"111"];
    [[self mutableArrayValueForKey:@"arrM"] removeObjectAtIndex:0]; 
}
    
```
![](/img/iOS/KVOBase_1.png)

```
注释1: 根据context对象，可以区分被监听的对象的哪个属性改变；可以区分父类还是子类来监听这个属性。
注释2: change字典中会包含观察的属性的变化情况，通过字典中的key值来获取。
    observeValueForKeyPath方法中的change字典中的key：
    NSKeyValueChangeKindKey: 属性操作类型，数值修改、添加、删除、替换(后三个针对于数组)
    NSKeyValueChangeNewKey: 返回新值，变化后的值
    NSKeyValueChangeOldKey: 返回旧值，变化前的值
    NSKeyValueChangeIndexesKey: 返回索引，用在监听数组的方法中国年
    NSKeyValueChangeNotificationIsPriorKey:
    
注释3: NSKeyValueObservingOptions参数
    NSKeyValueObservingOptionNew
    NSKeyValueObservingOptionOld
    NSKeyValueObservingOptionInitial
    NSKeyValueObservingOptionPrior
    
```

# 3.移除监听

>如果多次删除同一个监听的属性，就会报下面的错误。
reason: 'Cannot  remove an observer <Person 0x7f86fac0a620> for the key path "blance" from <Account 0x600000026e00> 
because it is not registered as an observer.'

>处理方式1: 使用OC异常捕获机制

```
    @try {
        [self.a removeObserver:self.p  forKeyPath:@"blance"];
        [self.a removeObserver:self.p  forKeyPath:@"interent"];
    } @catch (NSException *exception) {
        NSLog(@"asdasd");
    } @finally {
        NSLog(@"asdasd");        
    }
```

>处理方式2: RunTime+NSArray处理移除监听的方法。

```
思路：替换系统的添加删除KVO的方法，使用自己定义的方法
#import <Foundation/Foundation.h>

@interface Keypath : NSObject

@property (nonatomic, strong) NSString *keypath;
@property (nonatomic, strong) NSString *clazz;
@end

@interface NSObject (KVO)

@property (nonatomic, strong) NSMutableArray *arrMss;

// 自定义的添加KVO的方法
- (void)addKVOObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
// 自定义删除KVO的方法
- (void)removeKVOObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
// 添加监听到数组中保存
- (BOOL)addKeyPath:(id)obj keypath:(NSString *)keyPath;
// 从数组中删除监听
- (BOOL)removeKeyPath:(id)obj keypath:(NSString *)keyPath;
@end

#import "NSObject+KVO.h"
#import <objc/runtime.h>

@implementation NSObject (KVO)

+(void)load{
    SEL removeSel = @selector(removeObserver:forKeyPath:);
    SEL myRemoveSel = @selector(removeKVOObserver:forKeyPath:);
    SEL addSel = @selector(addObserver:forKeyPath:options:context:);
    SEL myaddSel = @selector(addKVOObserver:forKeyPath:options:context:);
    
    Method systemRemoveMethod = class_getClassMethod([self class],removeSel);
    Method DasenRemoveMethod = class_getClassMethod([self class], myRemoveSel);
    Method systemAddMethod = class_getClassMethod([self class],addSel);
    Method DasenAddMethod = class_getClassMethod([self class], myaddSel);
    
    method_exchangeImplementations(systemRemoveMethod, DasenRemoveMethod);
    method_exchangeImplementations(systemAddMethod, DasenAddMethod);
}

- (void)addKVOObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context
{
    if ([self addKeyPath:observer keypath:keyPath]) {
     [self addKVOObserver:observer forKeyPath:keyPath options:options context:context];       
    }

}

- (void)removeKVOObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath
{
    if ([self removeKeyPath:observer keypath:keyPath]) {
        [self removeKVOObserver:observer forKeyPath:keyPath];
    }
}

- (BOOL)addKeyPath:(id)obj keypath:(NSString *)keyPath
{
    if ([self isExistKeypath:obj keypath:keyPath] == nil) {
        Keypath *key = [[Keypath alloc] init];
        key.clazz = NSStringFromClass([obj class]);
        key.keypath = keyPath;
        [self.arrMss addObject:key];
        return YES;
    }else{
        return NO;
    }

    
}
- (BOOL)removeKeyPath:(id)obj keypath:(NSString *)keyPath
{   Keypath *temp = [self isExistKeypath:obj keypath:keyPath];
    if (temp != nil) {
        [self.arrMss removeObject:temp];
        return YES;
    }else{
        return NO;
    }
}


- (Keypath *)isExistKeypath:(id)obj keypath:(NSString *)keyPath
{
    NSString *className = NSStringFromClass([obj class]);
    for (Keypath *key in self.arrMss) {
        if ([key.clazz isEqualToString:className] && [key.keypath isEqualToString:keyPath]) {
            [self.arrMss removeObject:key];
            return key;
        }
        continue;
    }
    return nil;
}

```

# 4.手动KVO
>KVO默认是自动监听，即当属性发生变化时，自定发送通知给监听者，也可以手动发送通知给监听者。

```
// 在被监听的对象的类中重写系统方法automaticallyNotifiesObserversForKey:，
如果想要手动发送通知，返回NO；如果想要自动发送通知，返回YES。
+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key
{
    if ([key isEqualToString:@"blance"]) {
        return NO;
    }else if ([key isEqualToString:@"interent"]) {
        return NO;
    }{
        return [super automaticallyNotifiesObserversForKey:key];
    }
}

// 在被监听的对象的属性的set方法中添加两句代码
- (void)setBlance:(NSString *)blance
{
    [self willChangeValueForKey:@"blance"]; // 将要改变属性
    _blance = @"AAASAAA";
    [self didChangeValueForKey:@"blance"];  // 已经改变属性
}

// 当didChangeValueForKey方法调用后，会调用)observeValueForKeyPath:ofObject:change:context:方法
- (void)willChangeValueForKey:(NSString *)key;
- (void)didChangeValueForKey:(NSString *)key;
```

# 5.属性依赖性

     
# 总结
>1. KVO是使用RunTime来实现对象的监听。
>2. KVO是建立对象之间的关系，不是类与类之间的关系。
>3. KVO不保存监听者和被监听者，需要程序员自己进行保存。


